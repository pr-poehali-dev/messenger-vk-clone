import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  status: 'online' | 'offline' | 'away';
  lastSeen?: string;
  bio?: string;
  joinDate: Date;
  isBanned?: boolean;
  role: 'user' | 'admin';
}

interface Message {
  id: string;
  senderId: string;
  text: string;
  timestamp: Date;
  isRead: boolean;
}

interface Chat {
  id: string;
  name: string;
  avatar?: string;
  lastMessage?: Message;
  unreadCount: number;
  isGroup: boolean;
  participants?: User[];
}

const Index = () => {
  const [activeChat, setActiveChat] = useState<string | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [authMode, setAuthMode] = useState<'login' | 'register'>('login');
  const [authForm, setAuthForm] = useState({ email: '', password: '', name: '' });
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [showAdminPanel, setShowAdminPanel] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [profileForm, setProfileForm] = useState({ name: '', bio: '', avatar: '' });

  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∫–∞–ø)
  const [users, setUsers] = useState<User[]>([
    {
      id: 'admin',
      name: 'Himo',
      email: 'himo@messenger.com',
      status: 'online',
      bio: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
      joinDate: new Date('2024-01-01'),
      role: 'admin'
    }
  ]);

  // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [chats, setChats] = useState<Chat[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);

  const emojis = ['üòä', 'üòÑ', 'üòç', 'ü§î', 'üëç', '‚ù§Ô∏è', 'üî•', 'üéâ', 'üòÇ', 'üöÄ', 'üí™', '‚ú®'];

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  };

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', newMessage);
      setNewMessage('');
    }
  };

  const addEmoji = (emoji: string) => {
    setNewMessage(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  const handleAuth = () => {
    if (authForm.email && authForm.password) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
      if (authForm.email === 'himo@admin.com' && authForm.password === '12345678') {
        const adminUser = users.find(u => u.id === 'admin');
        if (adminUser) {
          setCurrentUser(adminUser);
          setProfileForm({ name: adminUser.name, bio: adminUser.bio || '', avatar: adminUser.avatar || '' });
        }
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const newUser: User = {
          id: Date.now().toString(),
          name: authForm.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: authForm.email,
          status: 'online',
          joinDate: new Date(),
          role: 'user'
        };
        setUsers(prev => [...prev, newUser]);
        setCurrentUser(newUser);
        setProfileForm({ name: newUser.name, bio: '', avatar: '' });
      }
      
      setIsAuthenticated(true);
    }
  };

  const handleSaveProfile = () => {
    if (currentUser) {
      const updatedUser = {
        ...currentUser,
        name: profileForm.name,
        bio: profileForm.bio,
        avatar: profileForm.avatar
      };
      
      setCurrentUser(updatedUser);
      setUsers(prev => prev.map(u => u.id === currentUser.id ? updatedUser : u));
      setShowProfileModal(false);
    }
  };

  const handleBanUser = (userId: string) => {
    setUsers(prev => prev.map(u => 
      u.id === userId ? { ...u, isBanned: !u.isBanned } : u
    ));
  };

  const handleDeleteUser = (userId: string) => {
    setUsers(prev => prev.filter(u => u.id !== userId));
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/20 to-purple-100">
        <Card className="w-96 p-6 shadow-xl">
          <div className="text-center mb-6">
            <Icon name="MessageCircle" size={48} className="text-primary mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
            <p className="text-gray-600">–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
          </div>
          
          <div className="space-y-4">
            {authMode === 'register' && (
              <Input
                placeholder="–ò–º—è"
                value={authForm.name}
                onChange={(e) => setAuthForm(prev => ({ ...prev, name: e.target.value }))}
              />
            )}
            <Input
              type="email"
              placeholder="Email"
              value={authForm.email}
              onChange={(e) => setAuthForm(prev => ({ ...prev, email: e.target.value }))}
            />
            <Input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={authForm.password}
              onChange={(e) => setAuthForm(prev => ({ ...prev, password: e.target.value }))}
            />
            
            <Button onClick={handleAuth} className="w-full">
              {authMode === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </Button>
            
            <Button
              variant="ghost"
              onClick={() => setAuthMode(authMode === 'login' ? 'register' : 'login')}
              className="w-full"
            >
              {authMode === 'login' ? '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}
            </Button>
          </div>
          
          <div className="mt-6 p-3 bg-blue-50 rounded-lg border border-blue-200">
            <p className="text-sm text-blue-700 font-medium mb-2">
              üîë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø:
            </p>
            <p className="text-xs text-blue-600">
              Email: himo@admin.com<br />
              –ü–∞—Ä–æ–ª—å: 12345678
            </p>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-screen flex bg-gray-50 font-sans relative">
      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
      {isFullscreen && (
        <Button
          variant="ghost"
          onClick={() => setIsFullscreen(false)}
          className="absolute top-4 left-4 z-50 bg-white shadow-md"
        >
          <Icon name="ArrowLeft" size={20} />
        </Button>
      )}
      
      <div className={`h-screen flex bg-gray-50 font-sans transition-all duration-300 ${
        isFullscreen ? 'absolute inset-0 z-40' : ''
      }`}>

        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
        <div className={`bg-white border-r border-gray-200 flex flex-col transition-all duration-300 ${
          isFullscreen ? 'w-0 overflow-hidden' : 'w-1/3'
        }`}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º */}
          <div className="p-4 border-b border-gray-200 bg-primary text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="w-10 h-10">
                  <AvatarFallback className="bg-white text-primary font-semibold">
                    {currentUser?.name.charAt(0)}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h1 className="text-lg font-semibold">{currentUser?.name}</h1>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span className="text-sm opacity-90">–æ–Ω–ª–∞–π–Ω</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowProfileModal(true)}
                  className="text-white hover:bg-white/20"
                >
                  <Icon name="User" size={16} />
                </Button>
                {currentUser?.role === 'admin' && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowAdminPanel(true)}
                    className="text-white hover:bg-white/20"
                  >
                    <Icon name="Shield" size={16} />
                  </Button>
                )}
              </div>
            </div>
          </div>

          {/* –ü–æ–∏—Å–∫ */}
          <div className="p-3 border-b border-gray-100">
            <div className="relative">
              <Icon name="Search" size={16} className="absolute left-3 top-3 text-gray-400" />
              <Input 
                placeholder="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤..." 
                className="pl-10 bg-gray-50 border-0"
              />
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
          <ScrollArea className="flex-1">
            {chats.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full p-8 text-gray-500">
                <Icon name="MessageCircle" size={48} className="mb-4 opacity-50" />
                <p className="text-center">
                  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤<br />
                  <span className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥</span>
                </p>
              </div>
            ) : (
              chats.map((chat) => (
                <div
                  key={chat.id}
                  onClick={() => {
                    setActiveChat(chat.id);
                    setIsFullscreen(true);
                  }}
                  className={`p-3 border-b border-gray-100 cursor-pointer transition-colors hover:bg-gray-50 ${
                    activeChat === chat.id ? 'bg-accent' : ''
                  }`}
                >
                  {/* –ß–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∞ */}
                </div>
              ))
            )}
          </ScrollArea>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —á–∞—Ç */}
        <div className="flex-1 flex flex-col">
          {activeChat ? (
            <>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
              <div className="p-4 border-b border-gray-200 bg-white flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Avatar className="w-10 h-10">
                    <AvatarFallback className="bg-primary text-white">
                      –ß
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h2 className="font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</h2>
                    <span className="text-sm text-gray-500">–¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</span>
                  </div>
                </div>
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <ScrollArea className="flex-1 p-4 bg-gray-50">
                <div className="flex items-center justify-center h-full">
                  <div className="text-center text-gray-500">
                    <Icon name="MessageSquare" size={64} className="mx-auto mb-4 opacity-30" />
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
                  </div>
                </div>
              </ScrollArea>

              {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="p-4 bg-white border-t border-gray-200">
                <div className="flex items-end gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                    className="mb-2"
                  >
                    <Icon name="Smile" size={20} />
                  </Button>
                  
                  <div className="flex-1">
                    <Input
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      className="bg-gray-100 border-0 rounded-full"
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    />
                    
                    {/* –ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ */}
                    {showEmojiPicker && (
                      <Card className="absolute bottom-16 left-4 p-3 shadow-lg z-10">
                        <div className="grid grid-cols-6 gap-2">
                          {emojis.map((emoji) => (
                            <button
                              key={emoji}
                              onClick={() => addEmoji(emoji)}
                              className="p-2 hover:bg-gray-100 rounded text-lg"
                            >
                              {emoji}
                            </button>
                          ))}
                        </div>
                      </Card>
                    )}
                  </div>

                  <Button
                    onClick={handleSendMessage}
                    disabled={!newMessage.trim()}
                    className="rounded-full"
                  >
                    <Icon name="Send" size={16} />
                  </Button>
                </div>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center bg-gray-50">
              <div className="text-center">
                <Icon name="MessageCircle" size={64} className="text-gray-400 mx-auto mb-4" />
                <h2 className="text-xl font-medium text-gray-600 mb-2">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä!
                </h2>
                <p className="text-gray-500">
                  –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                </p>
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–Ω—Ç–∞–∫—Ç—ã */}
        <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
          isFullscreen ? 'w-0 overflow-hidden' : 'w-80'
        }`}>
          <div className="p-4 border-b border-gray-200">
            <h3 className="font-semibold text-lg flex items-center gap-2">
              <Icon name="Users" size={20} />
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω
            </h3>
          </div>

          <ScrollArea className="flex-1 p-4">
            <div className="space-y-3">
              {users.filter(u => u.id !== currentUser?.id && !u.isBanned).map((user) => (
                <div key={user.id} className="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-50 cursor-pointer">
                  <div className="relative">
                    <Avatar className="w-10 h-10">
                      <AvatarFallback className="bg-secondary text-white">
                        {user.name.charAt(0)}
                      </AvatarFallback>
                    </Avatar>
                    <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium truncate flex items-center gap-2">
                      {user.name}
                      {user.role === 'admin' && (
                        <Badge className="bg-primary text-white text-xs px-1 py-0">
                          ADMIN
                        </Badge>
                      )}
                    </h4>
                    <p className="text-sm text-gray-500">–í —Å–µ—Ç–∏</p>
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—è */}
      <Dialog open={showProfileModal} onOpenChange={setShowProfileModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex justify-center">
              <Avatar className="w-20 h-20">
                <AvatarFallback className="bg-primary text-white text-2xl">
                  {profileForm.name.charAt(0) || 'U'}
                </AvatarFallback>
              </Avatar>
            </div>
            
            <Input
              placeholder="–ò–º—è"
              value={profileForm.name}
              onChange={(e) => setProfileForm(prev => ({ ...prev, name: e.target.value }))}
            />
            
            <Textarea
              placeholder="–û —Å–µ–±–µ"
              value={profileForm.bio}
              onChange={(e) => setProfileForm(prev => ({ ...prev, bio: e.target.value }))}
              rows={3}
            />
            
            <Input
              placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä"
              value={profileForm.avatar}
              onChange={(e) => setProfileForm(prev => ({ ...prev, avatar: e.target.value }))}
            />
            
            <div className="flex gap-2">
              <Button onClick={handleSaveProfile} className="flex-1">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button variant="outline" onClick={() => setShowProfileModal(false)} className="flex-1">
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å */}
      <Dialog open={showAdminPanel} onOpenChange={setShowAdminPanel}>
        <DialogContent className="sm:max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Icon name="Shield" size={20} />
              –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            </DialogTitle>
          </DialogHeader>
          
          <Tabs defaultValue="users" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</TabsTrigger>
              <TabsTrigger value="stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</TabsTrigger>
            </TabsList>
            
            <TabsContent value="users" className="space-y-4">
              <ScrollArea className="h-96">
                {users.filter(u => u.id !== currentUser?.id).map((user) => (
                  <div key={user.id} className="flex items-center justify-between p-3 border-b">
                    <div className="flex items-center gap-3">
                      <Avatar className="w-10 h-10">
                        <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <div>
                        <h4 className="font-medium">{user.name}</h4>
                        <p className="text-sm text-gray-500">{user.email}</p>
                        {user.isBanned && (
                          <Badge className="bg-red-100 text-red-700 text-xs">
                            –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
                          </Badge>
                        )}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant={user.isBanned ? "default" : "destructive"}
                        onClick={() => handleBanUser(user.id)}
                      >
                        {user.isBanned ? '–†–∞–∑–±–∞–Ω' : '–ë–∞–Ω'}
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleDeleteUser(user.id)}
                      >
                        <Icon name="Trash2" size={16} />
                      </Button>
                    </div>
                  </div>
                ))}
              </ScrollArea>
            </TabsContent>
            
            <TabsContent value="stats" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <Card className="p-4 text-center">
                  <h3 className="text-2xl font-bold text-primary">{users.length}</h3>
                  <p className="text-sm text-gray-600">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                </Card>
                <Card className="p-4 text-center">
                  <h3 className="text-2xl font-bold text-green-600">
                    {users.filter(u => u.status === 'online').length}
                  </h3>
                  <p className="text-sm text-gray-600">–û–Ω–ª–∞–π–Ω</p>
                </Card>
                <Card className="p-4 text-center">
                  <h3 className="text-2xl font-bold text-red-600">
                    {users.filter(u => u.isBanned).length}
                  </h3>
                  <p className="text-sm text-gray-600">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p>
                </Card>
                <Card className="p-4 text-center">
                  <h3 className="text-2xl font-bold text-orange-600">{chats.length}</h3>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</p>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;